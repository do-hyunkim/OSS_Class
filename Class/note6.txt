4. 15

- 정규표현식###
- grep
- ed
- sed ###

#1. 정규표현식
- 와일드카드와 혼동하지 말아야한다.
 * ? ...   chapter*.txt (와일드카드)
- 패턴 매칭할 때 사용한다.
- 1 line 기준
- 가장 긴 문자열 매칭

 1. 마침표 (.)
- any single character
- r. # ro, rk, rc, ...
- .x. # xxx, oxo, ... 
- [a-zA-Z]
ex) echo hello world | grep '.$' <<<라인의 마지막
d 가나옴

2. ^ (caret)
- 라인의 처음
ex) echo hello world | grep '^.'
h가 나옴
- [^] # not의 의미 
- [^a-z] # 소문자가 아님

3. & (dollar)
- 라인의 끝
- '^ $'  #빈줄

4. [리스트]
- [a-z]
- [a-np-z] # o를 제외한 모든 소문자
- [a-n][p-z] 는 다른것
- grep '[Tt]he' animals.txt   #소문자 대문자 구분 안하겠다
- grep -i 'the' animals.txt   #소문자 대문자 구분 안하겠다


5. *
- zero or more
- x* # x...... (와일드카드일때)
- x* # x..... 앞글자 한정 <<< 
- x 시작하는 단어 
x* (x)
xx* (o)


6. \+
- 1개 이상
 x\+

7. \?
- zero or one

8. \{i,j\} (횟수를 나타냄)
- j : 
- i, (i부터)
- ,j (j까지)
- x\{10\} # 10번
- x\{1,10\} # 1번에서 10번까지
- x\{10,\}

9. \(regex\)
- back referencing이 가능하다.
- '^\(.\)\(.\)\2\1' #동일한 알파벳 2개로 시작하는 라인 *aa... ll...
-  abba
'\(a\)\(b\)\2\1' << 숫자로 2번째 b가 나오고 1번째 a가 나온다
숫자로 대체하여 가능

10. regex1 \| regex2
- regex1 or regex2


Q.
1) a-f 까지 매칭
grep [a-f]

2) b나 ab매칭

3) 2번 + aaaaaab매칭 # 100개

4) 모든 글자 매칭

5) #으로 시작하는 문장 매칭

6) \로 끝나는 문장 매칭 

7) 대문자로 시작하지 않는 문장 매칭

8) 빈줄이 아닌 모든 줄 매칭

9) cookie나 cake이 포함된 줄 매칭

10) w. 매칭

1. grep [a-f]
2. grep 'b \| ab' 
3. grep 'b \| ab \| aa*b' 
4. grep '^' 
5. grep ^# 
6. grep \$ 
7. grep [^A-Z]  
8. grep [^'^ $']  
9. grep 'cookie \| cake' 
10. grep 'w.'

1. grep [a-f]
2. grep 'b \| ab'
3. grep 'b \| ab \| a*b'
4. grep '^'
5. grep '^.' | grep '#'
6. grep '.$' | grep '\'
7. grep [^A-Z]
8. grep [^'^ $.]
9 grep 'cookie \| cake'
10 grep 'w.'

1. grep [a-f] 
2. grep 'b \| ab' 
3. grep 'b \| ab \| aa*b' 
4. grep '^' 
5. grep ^# 
6.grep \$ 
7. grep [^A-Z]  
8. grep [^'^ $']  
9. grep 'cookie \| cake'


grep '[a-f]'
grep 'ab\?'
grep 'ab\{6\}'
grep '.'
grep '^#'
grep '\\$'
grep '^[^A-Z]'
grep -v '^$'
grep 'cookie\|cake'
grep 'w.'


##1. 확장
[a-zA-Z0-9_0]
\W (not)
\b : word boundary(앞뒤) h, o 
\b<regex>\b 
\<앞\>뒤
\B ell
\s whitespace(space, tab) ( 치환)
\S
#p( 프린트)

#2. ed
- 텍스트 에디터
- line-oriented text editor
- 인터렉티브형
- format : ed <file>
ex) ed animals.txt 하고나서 정규표현식 사용하면되는것
/the/ << 이런거처럼 /@@@/ 슬래쉬 안에 쓰는것

- 치환 (a -> b)하라
[address][명령][정규식][flags]
1,$s/a/b/  하고나서
순서대로 1 > address
명령 $s
정규식 /a/b
$p << 프린트를 해야함

1,$s/[a-z]//g  #global (flag)  <</g 쓰면 전체다
ex) 1,$s/[A-Z]/*/ >>>>대문자를 *로 바꾸기
ex) 1,$s/[A-Z]/+/g >>>> 전체다 바뀜

나올때 ctrl + d 두번
Q. 모든 모음을 지우기
1,$s/[aeiou]//g ( 정규표현식 연습하기)
1,$p


#3. sed
##1)intro
- stream editor
- 표준 입출력 사용 가능, 파이프라인 사용 가능
- 인터렉티브 (x)
- 단위 : 라인

Q. 
animals.txt에서 python -> PYTHON 으로 변경후 파일 전체 동일한 이름으# i는 원본 직접수정 
로 저장하기
A. 
tr 'python' 'PYTHON' < animals.txt > animals.txt (x)
; tmp ; mv tmp anidals.txt

sed -i 's/python/PYTHON/g' animals.txt

##2) sed 실행하기
- format : sed<script><input_file>#><out_file>
ex)
Q. hello -> world 로 바꾸기 파일이름 : file
A.
sed 's/hello/world/g' file  
sed 's/hello/world/g'<file
cat file | sed 's/hello/world/g' # 파이프라인으로 받을수 있다.

###1 -i option
- 동일한 파일에 저장한다 (in-place)
- 임시파일을 따로 저장하고 싶을 때 -iE #fileE (파일이름에 E 이렇게 붙음)

###2 -n option
- p와 같이 사용하여 출력 범위를 지정한다.
ex) sed -n '2p' file (2번째 줄만 프린트)
- 5~10줄 프린트
sed -n '5,10p'file # ,가 range

Q. python이 있는 라인만 출력해줘
A.
sed -n '/python/p' file

-  ; 으로 여러 정규식 연결 가능
sed -n '1p ; $p' file 
sed -n '1p ; $p' fileAfileBfileC
cat fileA fileB fileC | sed -n '1p ; $p'


### -e, -f
-e : expression
-f : file
sed -e '1p ; $p' -f file 
-옵션이 없으면 1번째 정규표현식, 2번째가 입력파일

- format : 
sed<option><script><input_file>  # full format


##3) script
- format : <address><cmd><options>
'2p'
(address : 범위)
- address : 2
- cdm : p
- 5,10p (이런식으러 씀)
- '3d' (3번째 라인을 지워라)

Q. input_file 에서 python으로 시작하는 라인 삭제하고, hello -> world로 변경한뒤
out_file에 저장하라 ( sed 사용)
A.
sed '
sed '5d' input_file > output_file
/^python/d ; s/hello/world/
sed '/[pP]ython/d' input_file > output_file
g' input_file > out
sed '1,10{s/...//g}' input_file > output_file
_file
sed -e '/
sed 's/...//g' input_file > output_file
^python/d' -e 's/hello/world/g' input_file > out_file

Q. 
1) 5번째 줄 삭제
2)  python, PYTHON 포함 줄 삭제
3) 처음 10개줄 중 2번 실행
4) 각 줄에 3글자 삭제

s '/python//g' ( 삭제하는 다른 방법)

- p, d, s, q(quit)


### cmd 's'
- format : s/regex/replacement/flag
- g (flag에서 많이쓰임)
- p : 해당부분 프린트
- i : 대소문자 구분 없음

Q. image.jpg.1, image.jpg.2, image.jpg.3 
(image1.jpg, image2.jpg, image3.jpg) 로 바꾸기 (sed사용)
A.
sed -e 's/image.jpg.\([1-3]\)/image\1.jpg/g ( 답아님 생각해보기)


### address 
- 범위 지정
'2p'
sed '160s/a/b'
sed '/apple/s///'  # apple이 있는 부분삭제
sed '/apple/!s///'  # apple 이 없는 부분

sed '160,200sA/a/b' (160,200 쉼표없이 범위 지정)
sed '160,2s/a/b' #160만 수행하고 끝
$
1,$~2 # step==2
****sed 시험에 많이 나옴


# 스크립트 작성
- 파일에 커맨드라인 입력
- 모드 변경한다.
chmod +x file
chmod +x name  
-실행
name 
./name

- 주석 #로 단다.
- 라인 단위.



